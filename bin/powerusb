#!/usr/bin/env python
from __future__ import print_function
#
# Manage PowerUSB power strips:
#  http://pwrusb.com
#
# Author: Mark Lamourine <markllama@gmail.com>
#
# Copyright 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import re
import lxml.etree as etree

from powerusb import PowerUSBStrip

"""
pwrusb --list-strips

pwrusb <id> [on|off|reset|status|current|power|clear]

pwrusb <id> [[--default] [(on|off)]]

"""

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Manage PowerUSB power strips")

    parser.add_argument("--config-file", default="~/.powerusbrc")

    target = parser.add_mutually_exclusive_group()

    target.add_argument("--list-strips", action="store_true")

    format = parser.add_mutually_exclusive_group()
    format.add_argument("--format", choices=['json', 'text', 'xml', "syslog"], 
                        default="text")
    format.add_argument("--json", const="json",
                        action="store_const", dest="format")
    format.add_argument("--text", const="text",
                        action="store_const", dest="format")
    format.add_argument("--xml", const="xml",
                        action="store_const", dest="format")
    format.add_argument("--syslog", const="syslog",
                        action="store_const", dest="format")

    parser.add_argument("--default", action="store_true")
    parser.add_argument("socket", nargs="?")
    parser.add_argument("action", nargs="?", choices=['status', 'on', 'off'])

    return parser.parse_args()

bus_re = re.compile("^(\d+):(\d+)(:(\d+))?$")

def parse_socket(socket_string):
    """Split a strip/socket ID string into components: bus, device, socket"""
    m = bus_re.match(socket_string)
    if m == None:
        raise ValueError("invalid bus/socket string: %s" % socket_string)

    busnum = int(m.group(1))
    devnum = int(m.group(2))
    socnum = m.group(4) and int(m.group(4))

    if not socnum in (1, 2, 3):
        raise ValueError("invalid socket number: %d" % socnum)

    # return the bus and device number.  Socket number is optional
    return (busnum, devnum, socnum)

def find_strip(bus, device):
    """Return a power strip at the requiested bus and device"""
    for strip in PowerUSBStrip.strips():
        if strip.busnum == bus and strip.devnum == device:
            return strip

    return None

def print_strip_status(format):
    """Find all power strips and print status from each one"""

    if format == "text":
        for strip in PowerUSBStrip.strips():
            strip.open()
            print(strip)
            strip.close()
    elif format == "xml":
        estrips = etree.Element("powerstrips")
        doc = etree.ElementTree(element=estrips)
        for strip in PowerUSBStrip.strips():
            strip.open()
            estrips.append(strip.xml())
            strip.close()
        print(etree.tostring(doc, pretty_print=True))
    elif format == "json":
        print("JSON output not implemented")
    elif format == "syslog":
        print("logging not implemented")

def strip_command(strip, action, format):

    print("execute strip command %s" % action)

    if action == None or action == "status":
        # print status
        pass

def socket_command(strip, socnum, action, format):

    if action == None or action == "status":
        socket_status(strip.socket[socnum], format)

    elif action in ['on', 'off']:
        strip.open()
        strip.socket[socnum].power = action
        strip.close()

def socket_status(socket, format):
    if format == "text":
        socket.strip.open()
        print(socket.power)
        socket.strip.close()

    elif format == "xml":
        socket.strip.open()
        print(etree.tostring(socket.xml(), pretty_print=True))
        socket.strip.close()

if __name__ == "__main__":

    opt = parse_arguments()

    if opt.socket == None or opt.list_strips:
        print_strip_status(opt.format)

    elif opt.socket != None:
        # find the strip object
        busnum, devnum, socnum = parse_socket(opt.socket)
        strip = find_strip(busnum, devnum)

        if strip == None:
            print("no such device: %s:%s" % (busnum, devnum))
            exit(1)

        if socnum == None:
            # strip action
            strip_command(strip, opt.action, opt.format)

        else:
            # socket action
            socket_command(strip, socnum, opt.action, opt.format)
